"""
packadd minpac
if !exists('*minpac#init')
  """ In case if minpac is not available init with settings for plugin-less environment:
  " ...
else
  """ In case if minpac is available init with verbosity 3 (to see minpac work):
  call minpac#init({'verbose': 3})
  """" List of additional packs minpac could install:
  call minpac#add('k-takata/minpac', {'type': 'opt'})		" pack manager .config/nvim/pack/{opt, start}
  call minpac#add('airblade/vim-gitgutter') 			" show git diff in nvim gutter
  call minpac#add('altercation/vim-colors-solarized') 		" colorscheme
  call minpac#add('itchyny/lightline.vim') 			" status line colorscheme
  call minpac#add('prettier/vim-prettier') 			" will auto format files if they have/support the @format pragma annotation in the header of the file
  call minpac#add('tpope/vim-commentary') 			" commentout line 'gcc', commentout patagraph 'gcap', commentout visual selection 'gc'
  call minpac#add('tpope/vim-endwise') 				" end certain structures automatically (if...end)
  call minpac#add('tpope/vim-fugitive') 			" git commands like :G for git status
  call minpac#add('tpope/vim-repeat') 				" plagin for repeat command . work well with (map)ped commands
  call minpac#add('tpope/vim-surround') 			" work with surroundings like '' or ()
  call minpac#add('machakann/vim-highlightedyank') 		" make yank visible
  call minpac#add('Shougo/deoplete.nvim') 			" vim autocompletion plugin
  if !has('nvim')
    call minpack#add('roxma/nvim-yarp')
    call minpack#add('roxma/vim-hug-neovim-rpc')
  endif
  call minpac#add('deoplete-plugins/deoplete-jedi')		" python autocompletion extension
  """ Minpac utility commands (run manually):
  command! PackUpdate call minpac#update()
  command! PackClean call minpac#clean()
  command! PackStatus call minpac#status()
  """ Plugin settings here:
  " vim-colors-solarized
  set termguicolors
  syntax enable
  set background=dark
  " Uncomment next line to use vim-colors-solarized with Solarized_Dark_Patched iterm2 schema:echo has("python3") 
  " let g:solarized_termcolors=256
  colorscheme gruvbox
  " Enable italics, Make sure this is immediately after colorscheme
  " https://stackoverflow.com/questions/3494435/vimrc-make-comments-italic
  highlight Comment cterm=italic gui=italic
  " itchyny/lightline.vim
  let g:lightline = {'colorscheme': 'gruvbox'}
  " use Shougo/deoplete.nvim autocompletion
  let g:deoplete#enable_at_startup = 1
endif

"""
""" Init all common (packet agnostic) nvim settings
"""
set splitbelow				" Horizontal split below current.
set splitright				" Vertical split to right of current.
set inccommand=nosplit			" live substitute
set hlsearch				" highlight search results
set smartcase				" ignore case if search pattern is all lowercase
set ignorecase				" ignore case when searching
set nocompatible			" disable vi-compatibility
set list				" show whitespaces
set number				" show line numbers
set mouse=a				" enable mouse
set wildmenu				" show mathch files as menu when use TAB
set lazyredraw				" redraw only when we need to
set cursorline				" highlight current lin
set hidden				" make it possible to switch between buffers without saving
set clipboard^=unnamed,unnamedplus 	" merge with system clopboard
""" undo-persistence
set undodir=~/.vim/undodir
set undofile

"""
""" Filetype settings
"""
"filetype indent plugin on " turn filetype detection, indent scripts and filetype plugins on
filetype on " try to recoginize type of edited file
filetype plugin on " load plagins for recognized file
filetype indent on " load scripts for indetion of recognized file

""""
"""" Mappings
""""
nnoremap H 0	" begingin of line
nnoremap L $	" end of line
nnoremap J G	" begingin of file
nnoremap K gg	" ending of file

"map <C-a> <esc>ggVG<CR>		" map select all to CTRL-a

" Show all buffers in tabs, or to close all tabs (toggle: it alternately executes  :tab ball and :tabo).
let notabs = 0
nnoremap <silent> <F8> :let notabs=!notabs<Bar>:if notabs<Bar>:tabo<Bar>:else<Bar>:tab ball<Bar>:tabn<Bar>:endif<CR>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

" Use <C-S> to clear the highlighting of :set hlsearch.
if maparg('<C-S>', 'n') ==# ''
  nnoremap <silent> <C-S> :nohlsearch<CR><C-S>
endif

"""
""" Leader actions
"""
map <SPACE> <leader>
"let mapleader = "\" " common leader mapping (default)

set notimeout		" no timeout for leader (wait forever for mapped key after pressing leader)
set showcmd		" show <leader> pressed

map <leader>pj :%!python -m json.tool<CR>	" format json
map <leader>px :%!xmllint % --format<CR>	" format xml
noremap <Leader>w :w<CR>			" Save the current buffer using the leader key
noremap <Leader>e :wq<CR>			" Save and exit Vim using the leader key
noremap <Leader>q :q!<CR>			" Exit without saving using the leader key
nnoremap <leader>c :nohl<CR>			" Clear highlighting

""" Kill the arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>

""""
"""" Just a reminders for some usefull combinations
""""
" insert mode actions
"CTRL-W    delete word to the left of cursor
"CTRL-O D  delete everything to the right of cursor
"CTRL-U    delete everything to the left of cursor
"CTRL-H    backspace/delete
"CTRL-J    insert newline (easier than reaching for the return key)
"CTRL-T    indent current line
"CTRL-D    un-indent current line
"Typing Ctrl-F during `/` search will open search history.
